apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("../keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    namespace "org.tlhInganHol.android.klingonassistant"
    compileSdkVersion 33
    defaultConfig {
        applicationId "org.tlhInganHol.android.klingonassistant"
        // We are targeting only Tiramisu and above, since changes to the permission system are not backwards-compatible.
        minSdkVersion 33
        targetSdkVersion 33
        versionCode 573
        versionName "2023.08.18b"
    }
    buildFeatures {
        buildConfig = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.android.material:material:1.6.1'

    // Needed to request permissions on API 33+ (post notifications permissions is needed for KWOTD).
    implementation 'androidx.activity:activity:1.2.0'
    implementation 'androidx.fragment:fragment:1.3.0'
}

task updateDatabase(type: Exec) {
    workingDir '..'
    commandLine './write_db.sh'
}

task checkAudioFiles(type: Exec) {
    workingDir '../../scripts'
    commandLine './check_audio_files.pl'
}

checkAudioFiles.onlyIf { file("../../scripts/check_audio_files.pl").exists() }

preBuild.dependsOn 'updateDatabase'
// preBuild.dependsOn 'checkAudioFiles'

// allprojects {
//     tasks.withType(JavaCompile) {
//         options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//     }
// }
